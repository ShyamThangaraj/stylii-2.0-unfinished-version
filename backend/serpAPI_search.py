# SerpAPI Search Module
# This module handles Amazon product searches using SerpAPI

from serpapi import GoogleSearch
import os
import json
from datetime import datetime
from typing import List, Dict, Any

def search_amazon_products(queries: List[str], num_results: int = 25) -> List[Dict[str, Any]]:
    """
    Search Amazon for multiple product queries using SerpAPI
    
    Args:
        queries: List of search queries generated by Gemini
        num_results: Number of results to return per query (default: 25, max: 100)
        
    Returns:
        List of raw SerpAPI search results for each query
    """
    # Get API key from environment variables
    api_key = os.getenv("SERP_API_KEY")
    if not api_key:
        raise ValueError("SERP_API_KEY not found in environment variables")
    
    results = []
    
    for query in queries:
        try:
            # Set up SerpAPI parameters
            params = {
                "engine": "amazon",
                "k": query,
                "amazon_domain": "amazon.com",
                "num": num_results,  # Limit results to top N products
                "api_key": api_key
            }
            
            # Perform the search
            search = GoogleSearch(params)
            result = search.get_dict()
            
            # Store the raw result
            results.append({
                "query": query,
                "success": True,
                "raw_data": result
            })
            
        except Exception as e:
            # Handle failed searches
            results.append({
                "query": query,
                "success": False,
                "error": str(e),
                "raw_data": None
            })
    
    # Save results to file
    save_results_to_file(results)
    
    return results

def save_results_to_file(results: List[Dict[str, Any]]) -> None:
    """
    Save SerpAPI results to a temporary file
    
    Args:
        results: List of search results to save
    """
    try:
        # Create filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"serpAPI_results_{timestamp}.txt"
        
        # Prepare data for saving
        save_data = {
            "timestamp": datetime.now().isoformat(),
            "total_queries": len(results),
            "successful_searches": len([r for r in results if r["success"]]),
            "failed_searches": len([r for r in results if not r["success"]]),
            "results": results
        }
        
        # Write to file
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("="*80 + "\n")
            f.write("SERPAPI SEARCH RESULTS\n")
            f.write("="*80 + "\n")
            f.write(f"Timestamp: {save_data['timestamp']}\n")
            f.write(f"Total Queries: {save_data['total_queries']}\n")
            f.write(f"Successful Searches: {save_data['successful_searches']}\n")
            f.write(f"Failed Searches: {save_data['failed_searches']}\n")
            f.write("="*80 + "\n\n")
            
            # Write detailed results
            for i, result in enumerate(results, 1):
                f.write(f"QUERY {i}: {result['query']}\n")
                f.write("-" * 50 + "\n")
                if result['success']:
                    f.write("Status: SUCCESS\n")
                    f.write("Raw SerpAPI Data:\n")
                    f.write(json.dumps(result['raw_data'], indent=2, ensure_ascii=False))
                else:
                    f.write("Status: FAILED\n")
                    f.write(f"Error: {result['error']}\n")
                f.write("\n" + "="*80 + "\n\n")
        
        print(f"üìÅ SerpAPI results saved to: {filename}")
        
    except Exception as e:
        print(f"‚ùå Failed to save results to file: {e}")

# Example usage
if __name__ == "__main__":
    # Test the function
    try:
        test_queries = [
            "modern sofa under $1000",
            "modern coffee table under $300",
            "cozy area rug 8x10 modern neutral under $400"
        ]
        
        results = search_amazon_products(test_queries, num_results=25)
        print("Search results:", results)
        
    except Exception as e:
        print(f"Error: {e}")
